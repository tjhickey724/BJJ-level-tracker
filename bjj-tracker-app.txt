

### Dashboard Page (pages/dashboard.js)
```javascript
import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import Layout from '../components/Layout';
import MoveCard from '../components/MoveCard';
import BeltSelector from '../components/BeltSelector';
import toast from 'react-hot-toast';

export default function Dashboard() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [moves, setMoves] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedBelt, setSelectedBelt] = useState('all');
  const [selectedStripes, setSelectedStripes] = useState('all');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [stats, setStats] = useState({
    totalMoves: 0,
    masteredMoves: 0,
    averageMastery: 0,
  });

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/');
    }
  }, [status, router]);

  useEffect(() => {
    fetchMoves();
  }, [selectedBelt, selectedStripes]);

  const fetchMoves = async () => {
    setLoading(true);
    try {
      let url = '/api/moves';
      const params = new URLSearchParams();
      
      if (selectedBelt !== 'all') params.append('belt', selectedBelt);
      if (selectedStripes !== 'all') params.append('stripes', selectedStripes);
      
      if (params.toString()) url += `?${params.toString()}`;
      
      const response = await fetch(url);
      const data = await response.json();
      
      setMoves(data);
      calculateStats(data);
    } catch (error) {
      toast.error('Failed to fetch moves');
    } finally {
      setLoading(false);
    }
  };

  const calculateStats = (movesData) => {
    const totalMoves = movesData.length;
    const masteredMoves = movesData.filter(m => m.masteryLevel >= 90).length;
    const averageMastery = movesData.length > 0
      ? Math.round(movesData.reduce((acc, m) => acc + (m.masteryLevel || 0), 0) / movesData.length)
      : 0;
    
    setStats({ totalMoves, masteredMoves, averageMastery });
  };

  const handleMoveUpdate = (moveId, newMasteryLevel) => {
    setMoves(prevMoves => 
      prevMoves.map(move => 
        move._id === moveId ? { ...move, masteryLevel: newMasteryLevel } : move
      )
    );
    calculateStats(moves.map(move => 
      move._id === moveId ? { ...move, masteryLevel: newMasteryLevel } : move
    ));
  };

  const filteredMoves = moves.filter(move => {
    if (selectedCategory !== 'all' && move.category !== selectedCategory) return false;
    return true;
  });

  if (status === 'loading' || loading) {
    return (
      <Layout>
        <div className="flex justify-center items-center h-screen">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            Welcome back, {session?.user?.name}!
          </h1>
          <p className="text-gray-600">Track your BJJ journey and master new techniques</p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Moves</p>
                <p className="text-2xl font-bold text-gray-800">{stats.totalMoves}</p>
              </div>
              <div className="text-3xl">📚</div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Mastered</p>
                <p className="text-2xl font-bold text-green-600">{stats.masteredMoves}</p>
              </div>
              <div className="text-3xl">✅</div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Average Mastery</p>
                <p className="text-2xl font-bold text-blue-600">{stats.averageMastery}%</p>
              </div>
              <div className="text-3xl">📈</div>
            </div>
          </div>
        </div>

        {/* Filters */}
        <div className="bg-white rounded-lg shadow p-6 mb-8">
          <h2 className="text-lg font-semibold mb-4">Filters</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Belt Level
              </label>
              <BeltSelector selected={selectedBelt} onChange={setSelectedBelt} />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Stripes
              </label>
              <select
                value={selectedStripes}
                onChange={(e) => setSelectedStripes(e.target.value)}
                className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="all">All Stripes</option>
                <option value="1">1 Stripe</option>
                <option value="2">2 Stripes</option>
                <option value="3">3 Stripes</option>
                <option value="4">4 Stripes</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Category
              </label>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="all">All Categories</option>
                <option value="submission">Submissions</option>
                <option value="guard">Guards</option>
                <option value="pass">Passes</option>
                <option value="sweep">Sweeps</option>
                <option value="escape">Escapes</option>
                <option value="takedown">Takedowns</option>
              </select>
            </div>
          </div>
        </div>

        {/* Moves Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredMoves.map((move) => (
            <MoveCard
              key={move._id}
              move={move}
              onUpdate={handleMoveUpdate}
            />
          ))}
        </div>

        {filteredMoves.length === 0 && !loading && (
          <div className="text-center py-12">
            <p className="text-gray-500">No moves found with the selected filters</p>
          </div>
        )}
      </div>
    </Layout>
  );
}
```

### App Page (pages/_app.js)
```javascript
import '../styles/globals.css';
import { SessionProvider } from 'next-auth/react';

export default function App({
  Component,
  pageProps: { session, ...pageProps },
}) {
  return (
    <SessionProvider session={session}>
      <Component {...pageProps} />
    </SessionProvider>
  );
}
```

### Document Page (pages/_document.js)
```javascript
import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
```

## 13. Styles (styles/globals.css)
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-gray-50;
  }
}

@layer components {
  .btn-primary {
    @apply bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200;
  }
  
  .btn-secondary {
    @apply bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200;
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  @apply bg-gray-100;
}

::-webkit-scrollbar-thumb {
  @apply bg-gray-400 rounded-full;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-gray-500;
}

/* Range slider styling */
input[type="range"] {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: pointer;
}

input[type="range"]::-webkit-slider-track {
  @apply bg-gray-200 rounded-lg h-2;
}

input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  @apply bg-blue-600 rounded-full h-5 w-5 -mt-1.5;
}

input[type="range"]::-moz-range-track {
  @apply bg-gray-200 rounded-lg h-2;
}

input[type="range"]::-moz-range-thumb {
  @apply bg-blue-600 rounded-full h-5 w-5 border-0;
}
```

## Setup Instructions

1. **Install dependencies:**
```bash
npm install
```

2. **Set up MongoDB:**
- Install MongoDB locally or use MongoDB Atlas
- Create a database named `bjj-tracker`

3. **Configure Google OAuth:**
- Go to [Google Cloud Console](https://console.cloud.google.com/)
- Create a new project or select existing
- Enable Google+ API
- Create OAuth 2.0 credentials
- Add `http://localhost:3000/api/auth/callback/google` to authorized redirect URIs

4. **Set up environment variables:**
- Copy the `.env.local` template above
- Fill in your MongoDB URI
- Add Google OAuth credentials
- Generate a NextAuth secret: `openssl rand -base64 32`

5. **Initialize the database:**
- Start the dev server: `npm run dev`
- Visit: `http://localhost:3000/api/admin/init-moves` (POST request)
- This will populate the moves collection

6. **Run the application:**
```bash
npm run dev
```

The app will be available at `http://localhost:3000`

## Features Implemented

✅ Google OAuth authentication
✅ MongoDB integration with Mongoose
✅ Environment variables with dotenv
✅ BJJ moves categorized by belt and stripes
✅ Progress tracking with mastery levels (0-100%)
✅ Responsive design for desktop and mobile
✅ Modern UI with Tailwind CSS
✅ Dashboard with statistics
✅ Filtering by belt, stripes, and category
✅ Real-time progress updates
✅ Toast notifications
✅ Loading states
✅ Secure API routes with authentication# BJJ Progress Tracker - Next.js Application

## Project Structure
```
bjj-tracker/
├── .env.local
├── package.json
├── next.config.js
├── tailwind.config.js
├── postcss.config.js
├── middleware.js
├── models/
│   ├── User.js
│   ├── Move.js
│   └── UserProgress.js
├── lib/
│   ├── mongodb.js
│   └── auth.js
├── pages/
│   ├── _app.js
│   ├── _document.js
│   ├── index.js
│   ├── api/
│   │   ├── auth/
│   │   │   └── [...nextauth].js
│   │   ├── moves/
│   │   │   ├── index.js
│   │   │   └── [id].js
│   │   ├── progress/
│   │   │   ├── index.js
│   │   │   └── update.js
│   │   └── admin/
│   │       └── init-moves.js
│   └── dashboard.js
├── components/
│   ├── Layout.js
│   ├── Navbar.js
│   ├── MoveCard.js
│   ├── ProgressBar.js
│   ├── BeltSelector.js
│   └── MasterySlider.js
└── styles/
    └── globals.css
```

## 1. Environment Variables (.env.local)
```env
MONGODB_URI=mongodb://localhost:27017/bjj-tracker
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your_nextauth_secret_key
```

## 2. Package Configuration (package.json)
```json
{
  "name": "bjj-tracker",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.4",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "next-auth": "^4.24.5",
    "mongoose": "^8.0.3",
    "dotenv": "^16.3.1",
    "@headlessui/react": "^1.7.17",
    "@heroicons/react": "^2.0.18",
    "react-hot-toast": "^2.4.1",
    "axios": "^1.6.2"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.3.6",
    "eslint": "8.55.0",
    "eslint-config-next": "14.0.4"
  }
}
```

## 3. Next.js Configuration (next.config.js)
```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['lh3.googleusercontent.com'],
  },
}

module.exports = nextConfig
```

## 4. Tailwind Configuration (tailwind.config.js)
```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        'bjj-blue': '#0066CC',
        'bjj-purple': '#663399',
        'bjj-brown': '#8B4513',
        'bjj-black': '#000000',
      },
    },
  },
  plugins: [],
}
```

## 5. PostCSS Configuration (postcss.config.js)
```javascript
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

## 6. MongoDB Connection (lib/mongodb.js)
```javascript
import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error('Please define the MONGODB_URI environment variable');
}

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function dbConnect() {
  if (cached.conn) {
    return cached.conn;
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    };

    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      return mongoose;
    });
  }

  try {
    cached.conn = await cached.promise;
  } catch (e) {
    cached.promise = null;
    throw e;
  }

  return cached.conn;
}

export default dbConnect;
```

## 7. Models

### User Model (models/User.js)
```javascript
import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema({
  email: {
    type: String,
    required: true,
    unique: true,
  },
  name: {
    type: String,
    required: true,
  },
  image: String,
  currentBelt: {
    type: String,
    enum: ['white', 'blue', 'purple', 'brown', 'black'],
    default: 'white',
  },
  currentStripes: {
    type: Number,
    min: 0,
    max: 4,
    default: 0,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

export default mongoose.models.User || mongoose.model('User', UserSchema);
```

### Move Model (models/Move.js)
```javascript
import mongoose from 'mongoose';

const MoveSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  category: {
    type: String,
    required: true,
    enum: ['submission', 'guard', 'pass', 'sweep', 'escape', 'takedown'],
  },
  belt: {
    type: String,
    required: true,
    enum: ['blue', 'purple', 'brown', 'black'],
  },
  stripes: {
    type: Number,
    required: true,
    min: 1,
    max: 4,
  },
  description: String,
  videoUrl: String,
});

export default mongoose.models.Move || mongoose.model('Move', MoveSchema);
```

### UserProgress Model (models/UserProgress.js)
```javascript
import mongoose from 'mongoose';

const UserProgressSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  moveId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Move',
    required: true,
  },
  masteryLevel: {
    type: Number,
    min: 0,
    max: 100,
    default: 0,
  },
  lastPracticed: Date,
  notes: String,
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

UserProgressSchema.index({ userId: 1, moveId: 1 }, { unique: true });

export default mongoose.models.UserProgress || mongoose.model('UserProgress', UserProgressSchema);
```

## 8. NextAuth Configuration (pages/api/auth/[...nextauth].js)
```javascript
import NextAuth from 'next-auth';
import GoogleProvider from 'next-auth/providers/google';
import dbConnect from '../../../lib/mongodb';
import User from '../../../models/User';

export default NextAuth({
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
  ],
  callbacks: {
    async signIn({ user, account, profile }) {
      if (account.provider === 'google') {
        await dbConnect();
        
        try {
          const existingUser = await User.findOne({ email: user.email });
          
          if (!existingUser) {
            await User.create({
              email: user.email,
              name: user.name,
              image: user.image,
            });
          }
          
          return true;
        } catch (error) {
          console.error('Error during sign in:', error);
          return false;
        }
      }
      return true;
    },
    async session({ session, token }) {
      await dbConnect();
      const dbUser = await User.findOne({ email: session.user.email });
      
      if (dbUser) {
        session.user.id = dbUser._id.toString();
        session.user.currentBelt = dbUser.currentBelt;
        session.user.currentStripes = dbUser.currentStripes;
      }
      
      return session;
    },
  },
  pages: {
    signIn: '/',
    error: '/auth/error',
  },
});
```

## 9. Middleware (middleware.js)
```javascript
import { withAuth } from 'next-auth/middleware';

export default withAuth({
  pages: {
    signIn: '/',
  },
});

export const config = {
  matcher: ['/dashboard/:path*', '/api/progress/:path*', '/api/moves/:path*'],
};
```

## 10. API Routes

### Initialize Moves (pages/api/admin/init-moves.js)
```javascript
import dbConnect from '../../../lib/mongodb';
import Move from '../../../models/Move';

const bjjMoves = [
  // Blue Belt Moves
  { name: 'Armbar from Guard', category: 'submission', belt: 'blue', stripes: 1 },
  { name: 'Triangle Choke', category: 'submission', belt: 'blue', stripes: 1 },
  { name: 'Kimura from Guard', category: 'submission', belt: 'blue', stripes: 2 },
  { name: 'Scissor Sweep', category: 'sweep', belt: 'blue', stripes: 1 },
  { name: 'Hip Bump Sweep', category: 'sweep', belt: 'blue', stripes: 2 },
  { name: 'Knee Shield Pass', category: 'pass', belt: 'blue', stripes: 3 },
  { name: 'Torreando Pass', category: 'pass', belt: 'blue', stripes: 2 },
  { name: 'Bridge and Roll Escape', category: 'escape', belt: 'blue', stripes: 1 },
  { name: 'Elbow Escape', category: 'escape', belt: 'blue', stripes: 1 },
  { name: 'Single Leg Takedown', category: 'takedown', belt: 'blue', stripes: 3 },
  
  // Purple Belt Moves
  { name: 'Omoplata', category: 'submission', belt: 'purple', stripes: 1 },
  { name: 'Bow and Arrow Choke', category: 'submission', belt: 'purple', stripes: 2 },
  { name: 'Cross Collar Choke', category: 'submission', belt: 'purple', stripes: 1 },
  { name: 'Butterfly Sweep', category: 'sweep', belt: 'purple', stripes: 1 },
  { name: 'X-Guard Sweep', category: 'sweep', belt: 'purple', stripes: 3 },
  { name: 'Leg Drag Pass', category: 'pass', belt: 'purple', stripes: 2 },
  { name: 'Stack Pass', category: 'pass', belt: 'purple', stripes: 1 },
  { name: 'De La Riva Guard', category: 'guard', belt: 'purple', stripes: 2 },
  { name: 'Spider Guard', category: 'guard', belt: 'purple', stripes: 3 },
  { name: 'Judo Throw - Seoi Nage', category: 'takedown', belt: 'purple', stripes: 4 },
  
  // Brown Belt Moves
  { name: 'Heel Hook', category: 'submission', belt: 'brown', stripes: 2 },
  { name: 'Calf Slicer', category: 'submission', belt: 'brown', stripes: 3 },
  { name: 'Ezekiel Choke', category: 'submission', belt: 'brown', stripes: 1 },
  { name: 'Berimbolo', category: 'sweep', belt: 'brown', stripes: 4 },
  { name: 'Deep Half Guard Sweep', category: 'sweep', belt: 'brown', stripes: 2 },
  { name: 'Floating Pass', category: 'pass', belt: 'brown', stripes: 3 },
  { name: 'Reverse De La Riva', category: 'guard', belt: 'brown', stripes: 2 },
  { name: 'Worm Guard', category: 'guard', belt: 'brown', stripes: 4 },
  { name: 'Flying Armbar', category: 'submission', belt: 'brown', stripes: 4 },
  
  // Black Belt Moves
  { name: 'Gogoplata', category: 'submission', belt: 'black', stripes: 3 },
  { name: 'Twister', category: 'submission', belt: 'black', stripes: 4 },
  { name: 'Inverted Triangle', category: 'submission', belt: 'black', stripes: 2 },
  { name: 'Matrix Back Take', category: 'sweep', belt: 'black', stripes: 3 },
  { name: 'Kiss of the Dragon', category: 'sweep', belt: 'black', stripes: 4 },
  { name: 'Headquarters Position', category: 'pass', belt: 'black', stripes: 2 },
  { name: 'Lapel Guard Systems', category: 'guard', belt: 'black', stripes: 3 },
  { name: 'Flying Triangle', category: 'submission', belt: 'black', stripes: 4 },
];

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    await dbConnect();
    
    // Clear existing moves
    await Move.deleteMany({});
    
    // Insert new moves
    const moves = await Move.insertMany(bjjMoves);
    
    res.status(200).json({ 
      message: 'Moves initialized successfully', 
      count: moves.length 
    });
  } catch (error) {
    console.error('Error initializing moves:', error);
    res.status(500).json({ message: 'Error initializing moves' });
  }
}
```

### Get Moves (pages/api/moves/index.js)
```javascript
import { getSession } from 'next-auth/react';
import dbConnect from '../../../lib/mongodb';
import Move from '../../../models/Move';
import UserProgress from '../../../models/UserProgress';

export default async function handler(req, res) {
  const session = await getSession({ req });
  
  if (!session) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  if (req.method !== 'GET') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    await dbConnect();
    
    const { belt, stripes } = req.query;
    const query = {};
    
    if (belt) query.belt = belt;
    if (stripes) query.stripes = parseInt(stripes);
    
    const moves = await Move.find(query).sort({ belt: 1, stripes: 1, category: 1 });
    
    // Get user progress for these moves
    const userProgress = await UserProgress.find({
      userId: session.user.id,
      moveId: { $in: moves.map(m => m._id) }
    });
    
    // Combine moves with progress
    const movesWithProgress = moves.map(move => {
      const progress = userProgress.find(p => p.moveId.toString() === move._id.toString());
      return {
        ...move.toObject(),
        masteryLevel: progress ? progress.masteryLevel : 0,
        lastPracticed: progress ? progress.lastPracticed : null,
      };
    });
    
    res.status(200).json(movesWithProgress);
  } catch (error) {
    console.error('Error fetching moves:', error);
    res.status(500).json({ message: 'Error fetching moves' });
  }
}
```

### Update Progress (pages/api/progress/update.js)
```javascript
import { getSession } from 'next-auth/react';
import dbConnect from '../../../lib/mongodb';
import UserProgress from '../../../models/UserProgress';

export default async function handler(req, res) {
  const session = await getSession({ req });
  
  if (!session) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    await dbConnect();
    
    const { moveId, masteryLevel, notes } = req.body;
    
    const progress = await UserProgress.findOneAndUpdate(
      {
        userId: session.user.id,
        moveId: moveId,
      },
      {
        masteryLevel,
        notes,
        lastPracticed: new Date(),
        updatedAt: new Date(),
      },
      {
        new: true,
        upsert: true,
      }
    );
    
    res.status(200).json(progress);
  } catch (error) {
    console.error('Error updating progress:', error);
    res.status(500).json({ message: 'Error updating progress' });
  }
}
```

## 11. Components

### Layout Component (components/Layout.js)
```javascript
import Navbar from './Navbar';
import { Toaster } from 'react-hot-toast';

export default function Layout({ children }) {
  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      <main className="container mx-auto px-4 py-8">
        {children}
      </main>
      <Toaster position="bottom-right" />
    </div>
  );
}
```

### Navbar Component (components/Navbar.js)
```javascript
import { useSession, signIn, signOut } from 'next-auth/react';
import Image from 'next/image';
import Link from 'next/link';

export default function Navbar() {
  const { data: session, status } = useSession();

  return (
    <nav className="bg-white shadow-lg">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          <Link href="/" className="flex items-center space-x-2">
            <span className="text-2xl font-bold text-gray-800">🥋 BJJ Tracker</span>
          </Link>
          
          <div className="flex items-center space-x-4">
            {session ? (
              <>
                <Link href="/dashboard" className="text-gray-700 hover:text-gray-900">
                  Dashboard
                </Link>
                <div className="flex items-center space-x-2">
                  {session.user.image && (
                    <Image
                      src={session.user.image}
                      alt={session.user.name}
                      width={32}
                      height={32}
                      className="rounded-full"
                    />
                  )}
                  <span className="text-sm text-gray-700">{session.user.name}</span>
                </div>
                <button
                  onClick={() => signOut()}
                  className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md text-sm"
                >
                  Sign Out
                </button>
              </>
            ) : (
              <button
                onClick={() => signIn('google')}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md"
              >
                Sign In with Google
              </button>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
}
```

### MoveCard Component (components/MoveCard.js)
```javascript
import { useState } from 'react';
import MasterySlider from './MasterySlider';
import toast from 'react-hot-toast';

export default function MoveCard({ move, onUpdate }) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [masteryLevel, setMasteryLevel] = useState(move.masteryLevel || 0);
  const [isSaving, setIsSaving] = useState(false);

  const categoryColors = {
    submission: 'bg-red-100 text-red-800',
    guard: 'bg-blue-100 text-blue-800',
    pass: 'bg-green-100 text-green-800',
    sweep: 'bg-yellow-100 text-yellow-800',
    escape: 'bg-purple-100 text-purple-800',
    takedown: 'bg-orange-100 text-orange-800',
  };

  const handleMasteryUpdate = async (newLevel) => {
    setMasteryLevel(newLevel);
    setIsSaving(true);

    try {
      const response = await fetch('/api/progress/update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          moveId: move._id,
          masteryLevel: newLevel,
        }),
      });

      if (response.ok) {
        toast.success('Progress updated!');
        if (onUpdate) onUpdate(move._id, newLevel);
      } else {
        toast.error('Failed to update progress');
      }
    } catch (error) {
      toast.error('Error updating progress');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow">
      <div 
        className="cursor-pointer"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="flex justify-between items-start mb-2">
          <h3 className="text-lg font-semibold text-gray-800">{move.name}</h3>
          <span className={`px-2 py-1 rounded-full text-xs font-medium ${categoryColors[move.category]}`}>
            {move.category}
          </span>
        </div>
        
        <div className="flex items-center space-x-2 mb-3">
          <span className="text-sm text-gray-600">Belt: {move.belt}</span>
          <span className="text-sm text-gray-600">•</span>
          <span className="text-sm text-gray-600">
            {'⭐'.repeat(move.stripes)} ({move.stripes} stripe{move.stripes > 1 ? 's' : ''})
          </span>
        </div>

        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-gradient-to-r from-blue-400 to-blue-600 h-2 rounded-full transition-all"
            style={{ width: `${masteryLevel}%` }}
          />
        </div>
        <p className="text-sm text-gray-600 mt-1">Mastery: {masteryLevel}%</p>
      </div>

      {isExpanded && (
        <div className="mt-4 pt-4 border-t border-gray-200">
          <MasterySlider
            value={masteryLevel}
            onChange={handleMasteryUpdate}
            disabled={isSaving}
          />
          {move.lastPracticed && (
            <p className="text-xs text-gray-500 mt-2">
              Last practiced: {new Date(move.lastPracticed).toLocaleDateString()}
            </p>
          )}
        </div>
      )}
    </div>
  );
}
```

### MasterySlider Component (components/MasterySlider.js)
```javascript
export default function MasterySlider({ value, onChange, disabled }) {
  const getMasteryLabel = (level) => {
    if (level === 0) return 'Not Started';
    if (level <= 25) return 'Beginner';
    if (level <= 50) return 'Developing';
    if (level <= 75) return 'Proficient';
    if (level < 100) return 'Advanced';
    return 'Mastered';
  };

  const getMasteryColor = (level) => {
    if (level === 0) return 'text-gray-500';
    if (level <= 25) return 'text-red-500';
    if (level <= 50) return 'text-orange-500';
    if (level <= 75) return 'text-yellow-500';
    if (level < 100) return 'text-blue-500';
    return 'text-green-500';
  };

  return (
    <div className="space-y-2">
      <div className="flex justify-between items-center">
        <label className="text-sm font-medium text-gray-700">
          Adjust Mastery Level
        </label>
        <span className={`text-sm font-semibold ${getMasteryColor(value)}`}>
          {getMasteryLabel(value)}
        </span>
      </div>
      
      <input
        type="range"
        min="0"
        max="100"
        step="5"
        value={value}
        onChange={(e) => onChange(parseInt(e.target.value))}
        disabled={disabled}
        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600"
      />
      
      <div className="flex justify-between text-xs text-gray-500">
        <span>0%</span>
        <span>25%</span>
        <span>50%</span>
        <span>75%</span>
        <span>100%</span>
      </div>
    </div>
  );
}
```

### BeltSelector Component (components/BeltSelector.js)
```javascript
import { Fragment } from 'react';
import { Listbox, Transition } from '@headlessui/react';
import { ChevronUpDownIcon } from '@heroicons/react/20/solid';

const belts = [
  { name: 'All Belts', value: 'all', color: 'bg-gray-500' },
  { name: 'Blue Belt', value: 'blue', color: 'bg-blue-500' },
  { name: 'Purple Belt', value: 'purple', color: 'bg-purple-500' },
  { name: 'Brown Belt', value: 'brown', color: 'bg-amber-700' },
  { name: 'Black Belt', value: 'black', color: 'bg-black' },
];

export default function BeltSelector({ selected, onChange }) {
  const selectedBelt = belts.find(belt => belt.value === selected) || belts[0];

  return (
    <Listbox value={selected} onChange={onChange}>
      <div className="relative">
        <Listbox.Button className="relative w-full cursor-pointer rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
          <span className="flex items-center">
            <span className={`inline-block h-4 w-4 rounded-full ${selectedBelt.color} mr-2`} />
            <span className="block truncate">{selectedBelt.name}</span>
          </span>
          <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
            <ChevronUpDownIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
          </span>
        </Listbox.Button>
        <Transition
          as={Fragment}
          leave="transition ease-in duration-100"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm z-10">
            {belts.map((belt) => (
              <Listbox.Option
                key={belt.value}
                className={({ active }) =>
                  `relative cursor-pointer select-none py-2 pl-10 pr-4 ${
                    active ? 'bg-amber-100 text-amber-900' : 'text-gray-900'
                  }`
                }
                value={belt.value}
              >
                {({ selected }) => (
                  <>
                    <span className="flex items-center">
                      <span className={`inline-block h-4 w-4 rounded-full ${belt.color} mr-2`} />
                      <span className={`block truncate ${selected ? 'font-medium' : 'font-normal'}`}>
                        {belt.name}
                      </span>
                    </span>
                  </>
                )}
              </Listbox.Option>
            ))}
          </Listbox.Options>
        </Transition>
      </div>
    </Listbox>
  );
}
```

## 12. Pages

### Home Page (pages/index.js)
```javascript
import { useSession, signIn } from 'next-auth/react';
import { useRouter } from 'next/router';
import { useEffect } from 'react';
import Layout from '../components/Layout';

export default function Home() {
  const { data: session, status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (session) {
      router.push('/dashboard');
    }
  }, [session, router]);

  if (status === 'loading') {
    return (
      <Layout>
        <div className="flex justify-center items-center h-screen">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="max-w-4xl mx-auto">
        <div className="text-center py-20">
          <h1 className="text-5xl font-bold text-gray-800 mb-4">
            🥋 BJJ Progress Tracker
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            Track your Brazilian Jiu-Jitsu journey, one technique at a time
          </p>
          
          <div className="bg-white rounded-lg shadow-xl p-8 max-w-md mx-auto">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6">
              Get Started
            </h2>
            <p className="text-gray-600 mb-6">
              Sign in with your Google account to start tracking your BJJ progress
            </p>
            <button
              onClick={() => signIn('google')}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-lg transition duration-200 flex items-center justify-center space-x-2"
            >
              <svg className="w-6 h-6" viewBox="0 0 24 24">
                <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              <span>Sign in with Google</span>
            </button>
          </div>

          <div className="mt-12 grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white p-6 rounded-lg shadow">
              <div className="text-3xl mb-3">📊</div>
              <h3 className="text-lg font-semibold mb-2">Track Progress</h3>
              <p className="text-gray-600 text-sm">
                Monitor your mastery level for each technique from 0% to 100%
              </p>
            </div>
            <div className="bg-white p-6 rounded-lg shadow">
              <div className="text-3xl mb-3">🎯</div>
              <h3 className="text-lg font-semibold mb-2">Organized by Belt</h3>
              <p className="text-gray-600 text-sm">
                Techniques organized by belt level and stripe requirements
              </p>
            </div>
            <div className="bg-white p-6 rounded-lg shadow">
              <div className="text-3xl mb-3">📱</div>
              <h3 className="text-lg font-semibold mb-2">Mobile Friendly</h3>
              <p className="text-gray-600 text-sm">
                Access your training progress from any device, anywhere
              </p>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}
      router.push('/dashboard');
    }
  }, [session, router]);

  if (status === 'loading') {
    return (
      <Layout>
        <div className="flex justify-center items-center h-screen">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="max-w-4xl mx-auto">
        <div className="text-center py-20">
          <h1 className="text-5xl font-bold text-gray-800 mb-4">
            🥋 BJJ Progress Tracker
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            Track your Brazilian Jiu-Jitsu journey, one technique at a time
          </p>
          
          <div className="bg-white rounded-lg shadow-xl p-8 max-w-md mx-auto">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6">
              Get Started
            </h2>
            <p className="text-gray-600 mb-6">
              Sign in with your Google account to start tracking your BJJ progress
            </p>
            <button
              onClick={() => signIn('google')}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-lg transition duration-200 flex items-center justify-center space-x-2"
            >
              <svg className="w-6 h-6" viewBox="0 0 24 24">
                <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              <span>Sign in with Google</span>
            </button>
          </div>

          <div className="mt-12 grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white p-6 rounded-lg shadow">
              <div className="text-3xl mb-3">📊</div>
              <h3 className="text-lg font-semibold mb-2">Track Progress</h3>
              <p className="text-gray-600 text-sm">
                Monitor your mastery level for each technique from 0% to 100%
              </p>
            </div>
            <div className="bg-white p-6 rounded-lg shadow">
              <div className="text-3xl mb-3">🎯</div>
              <h3 className="text-lg font-semibold mb-2">Organized by Belt</h3>
              <p className="text-gray-600 text-sm">
                Techniques organized by belt level and stripe requirements
              </p>
            </div>
            <div className="bg-white p-6 rounded-lg shadow">
              <div className="text-3xl mb-3">📱</div>
              <h3 className="text-lg font-semibold mb-2">Mobile Friendly</h3>
              <p className="text-gray-600 text-sm">
                Access your training progress from any device, anywhere
              </p>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}